<!DOCTYPE HTML>
<html>
<head>
 <!--Import Google Icon Font-->
<link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<!--Import materialize.css-->
<link type="text/css" rel="stylesheet" href="css/materialize.css"  media="screen,projection"/>
<script src="/socket.io/socket.io.js"></script>
<script src = "/js/three.js"></script>
<script src = "/js/GLTFLoader.js"></script>
<script src="js/controls/OrbitControls.js"></script>

<script type="text/javascript" src="js/FileSaver.min.js"></script>
<script type="text/javascript" src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script type="text/javascript" src="js/materialize.min.js"></script>

<title>Skate Control V{{ version }}</title>
<style>

.side-nav {
    transform: translateX(0%) !important;
}

  .roundButton {
    border-radius: 12px;
  }

    header, main, footer {
      padding-left: 300px;

    }
  </style>


<header>
<div>
<div class = "row">
<div class = "col l12">
<nav>
<div class = "nav-wrapper">
<a href = "#" class = "brand-logo dropdown-button" data-activates="dropdown1">
Skate Control V{{ version }}
<i class="material-icons right">arrow_drop_down</i> </a>
<ul id = "nav-desktop" class = "right hide-on-med-and-down">
<li class = "active"><a href = "/">Home</a></li>
<li><a href = "analytics.php">Analytics</a></li>
<li><a href = "settings.php" >Settings</a></li>
</ul>
</div>
</nav>
</div>
</div>
</div>
</header>

<ul id="slide-out" class="side-nav fixed grey lighten-2">
{{#active_pis}}
 <li><div class = "card-panel"><h4 class = "grey-text"><a href="#">Pis</a></h4></div></li><li><a href = "pi/{{ pi_id }}"class = "waves-effect waves-teal btn-flat white roundButton"><i class="material-icons">menu</i>{{ pi_name }}</a></li></ul>
 {{/active_pis}}
 {{^active_pis}}<p><blockquote>No Pis Online</blockquote>{{/active_pis}}
<main>
<div class = "row">
<div class="col l12">
	<ul class = "tabs">
		<li class="tab col s6"><a href="#main" class="active">Main Control</a></li>
        <li class="tab col s6"><a href="#viz">Data Visualizer</a></li>
    </ul>
</div>
<div class = "col s12" id = "main">
<ul class = collection col-l6>
<li class = "collection-item"><h6>Status</h6></li> <b>Online | Not Polling</b>
</ul>
<ul class = collection>
<li class = "collection-item"><h6>Software Version</h6><b>0.4</b></li> 
</ul>
<ul class = collection>
<li class = "collection-item"><h6>Capabilities</h6></li>
<li class = "collection-item">LED</li>
<li class = "collection-item">IMU</li>

<blockquote> ... Polling Config Options ...</blockquote>
  <form action="#">
    <p>
      <input class="with-gap" name="group1" type="radio" id="test1" onclick="sendMq('Pi_Control_Set_Config_1')" />
      <label for="test1">Euler </label>
    </p>
    <p>
      <input class="with-gap disabled" name="group1" type="radio" id="test2" onclick="sendMq('Pi_Control_Set_Config_2')"/>
      <label for="test2">Quaternion</label>
    </p>
    <p>
      <input class="with-gap" name="group1" type="radio" id="test3" onclick="sendMq('Pi_Control_Set_Config_3')" />
      <label for="test3">Euler & Accelerometer</label>
    </p>
    <p>
      <input class="with-gap disabled" name="group1" type="radio" id="test4"  onclick="sendMq('Pi_Control_Set_Config_4')"/>
      <label for="test4">Quaternion & Accelerometer</label>
    </p>
  </form>

<ul class = collection>
<a class="waves-effect waves-light btn-flat green" onclick="sendMq('Pi_Control_Start_Poll');">Start Polling</a>
<a class="waves-effect waves-light btn-flat red" onclick="sendMq('Pi_Control_Stop_Poll');">Stop Polling</a>
</ul>
<blockquote> ... TOOLS ...</blockquote>

<a class="waves-effect waves-light btn-flat" onclick="sendMq('Pi_Control_indicate')">Send Indicator</a>
<a class="waves-effect waves-light btn-flat" onclick="sendMq('Pi_Control_Ping')">Send Ping</a>
<a class="waves-effect waves-light btn-flat" onclick="sendMq('Pi_Control_Terminate')">Kill</a>
<a class="waves-effect waves-light btn-flat" onclick="sendMq('Pi_Control_Calibrate_IMU')">Recalibrate IMU</a>
<div class = "card-panel" id="calib_status">Calibration Status</div>
<ul class = collection>
<li class = "collection-item" id="loglist"><h>Logs</h6></li>
{{#logfiles.logs}}
<li class = "collection-item">{{ filename }}  <a class="waves-effect waves-light btn-flat" onclick="sendMq('Pi_Control_Request_Log_{{ index }}')">Download</a></li>
{{/logfiles.logs}}
{{^logfiles.logs}}<p><blockquote>No logs from this session</blockquote>{{/logfiles.logs}}
</ul>



</div>


<div class = "col s12" id = "viz">
<blockquote> ... Control ...</blockquote>

<a class="waves-effect waves-light btn-flat" onclick="sendMq('Pi_Control_Enable_Stream')">Start Poll Stream</a>
<a class="waves-effect waves-light btn-flat" onclick="sendMq('Pi_Control_Disable_Stream')">Stop Poll Stream</a>
<canvas id = "renderspace"></div>

</canvas>
<div class = "card grey col s12">
<p id = "newestFrame"></p>
<p>Fetch live logs at http://nwajagu.com/sensorlog/</p>
</div>
</div>
</main>
<script>
  function frameArea(sizeToFitOnScreen, boxSize, boxCenter, camera) {
    console.log(boxCenter);
    const halfSizeToFitOnScreen = sizeToFitOnScreen * 0.5;
    const halfFovY = THREE.Math.degToRad(camera.fov * .5);
    const distance = halfSizeToFitOnScreen / Math.tan(halfFovY);
    // compute a unit vector that points in the direction the camera is now
    // in the xz plane from the center of the box
    const direction = (new THREE.Vector3())
        .subVectors(camera.position, boxCenter)
        .multiply(new THREE.Vector3(1, 0, 1))
        .normalize();

    // move the camera to a position distance units way from the center
    // in whatever direction the camera was from the center already
    camera.position.copy(direction.multiplyScalar(distance).add(boxCenter));

    // pick some near and far values for the frustum that
    // will contain the box.
    camera.near = boxSize / 100;
    camera.far = boxSize * 100;

    camera.updateProjectionMatrix();

    // point the camera to look at the center of the box
    //camera.lookAt(boxCenter.x, boxCenter.y, boxCenter.z);
  }

const scene = new THREE.Scene();
scene.background = new THREE.Color('white');

var rx,ry,rz;
var object;

const fov = 45;
const aspect = 2;  // the canvas default
const near = 0.1;
const far = 100;
var box;


//camera.position.set(0, 10, 20);

const canvas = document.getElementById('renderspace');

var renderer = new THREE.WebGLRenderer({canvas: canvas});

const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);

  {
    const skyColor = 0xB1E1FF;  // light blue
    const groundColor = 0xB97A20;  // brownish orange
    const intensity = 1;
    const light = new THREE.HemisphereLight(skyColor, groundColor, intensity);
    scene.add(light);
  }

  {
    const color = 0xFFFFFF;
    const intensity = 1;
    const light = new THREE.DirectionalLight(color, intensity);
    light.position.set(5, 10, 2);
    scene.add(light);
    scene.add(light.target);
  }

  {
    const gltfLoader = new THREE.GLTFLoader();
    gltfLoader.load('/skateboard/scene.gltf', (gltf) => {
      var root = gltf.scene;
      //root.scale.set(10, 10, 10);
      scene.add(root);

      // compute the box that contains all the stuff
      // from root and below
      box = new THREE.Box3().setFromObject(root);
      //console.log(box);
      const boxSize = box.getSize(new THREE.Vector3()).length();
      const boxCenter = box.getCenter(new THREE.Vector3());

      camera.position.set(0,1,5); 
      camera.lookAt(scene.position);


      // set the camera to frame the box
      //frameArea(boxSize * 0.5, boxSize, boxCenter, camera);

      // update the Trackball controls to handle the new size
      //controls.maxDistance = boxSize * 10;
      //controls.target.copy(boxCenter);
      //controls.update();
    });
  }



/*
  const controls = new THREE.OrbitControls(camera, canvas);

    controls.target.set(0, 5, 0);
  controls.update();
*/
/*
loader.load( '/skateboard/scene.gltf', function ( gltf ) {
  object = gltf.scene;
  //object.scale.set(10, 10, 10);
    scene.add( object);

  const box = new THREE.Box3().setFromObject(object);
  boxSize = box.getSize(new THREE.Vector3()).length();
  boxCenter_ = box.getCenter(new THREE.Vector3());



  }, undefined, function ( error ) {

    console.error( error );

  } );



frameArea(boxSize * 0.5, boxSize, boxCenter_, camera);
*/
//console.log(container);
var w = 800;
var h = 800;
renderer.setSize(w,h);

//container.appendChild( renderer.domElement );

var m4 = new THREE.Matrix4();

//camera = new THREE.PerspectiveCamera( 60, w / h, 1, 200 );
//camera.position.z = 10;
var rot = 0;

var socket = io();


function animate() {
//console.log("X" + rx + ",Y:" + ry + ",Z:" + rz);
scene.children[3].rotation.x = rx;
scene.children[3].rotation.y = ry;

//m4.makeRotationFromEuler(new THREE.Euler( rx,ry, 1.57, 'XYZ' ));
//console.log(m4);
//box.applyMatrix4(m4);
//box.rotation.y = ry;
//object.rotation.z = rz;

//object.setRotationFromMatrix(m4);

//console.log(scene.children[0]);
renderer.render( scene, camera );
requestAnimationFrame( animate );

}


function sendMq(msg)
{
socket.emit("web_command",msg);
}

    var filename = "";
      socket.on('pi_alert', function(msg){
      	if(msg == "reload")
      	{
      		location.reload();
      	}
      //$('#messages').append($('<li>').text('frame count: ' + msg));
	  });
        socket.on('Web_Alert_NewLog_Name', function(msg){
 		filename = msg;
      //$('#messages').append($('<li>').text('frame count: ' + msg));
	  });

        socket.on('Web_Alert_NewLog_Data', function(msg){
     		var blob = new Blob([msg], {
			 type: "text/plain;charset=utf-8"
			});
			saveAs(blob,filename);
	  });

        socket.on('Web_Alert_NewCalib_Data', function(msg){
        	var calibDiv = document.getElementById("calib_status");
        	calibDiv.innerHTML = "<b>Calibration Progress: </b>" + msg;
	  });

                socket.on('Web_Alert_CalibrationComplete', function(msg){
        	var calibDiv = document.getElementById("calib_status");
        	calibDiv.innerHTML = "<b>Calibration Complete</b>";
	  });


     socket.on('Web_Alert_New_PollFrame', function(msg){
      //$('#messages').append($('<li>').text('frame count: ' + msg));
      jsonmsg = JSON.parse(msg);
      rx = jsonmsg.y * 0.01745; // threejs uses radian, convert our degree to radian (pi/180)
      ry = jsonmsg.x * 0.01745;  //axis of model are swapped, so swap
      rz = jsonmsg.z * 0.01745;
     //rot = new THREE.Euler(rx,ry,rz,'XYZ');
 	//m4.makeRotationFromEuler(rot);
 	//console.log(m4);
 	animate();
	var framep = document.getElementById("newestFrame");
	framep.innerHTML = msg;
      //console.log(m4);
 		//$("#axV").text(msg.data.ax);
 		//$("#ayV").text(msg.data.ay);
 		//$("#azV").text(msg.data.az);
 		//$("#rpmV").text( msg.data.rpm);
 		//$("#wsV").text(msg.data.wheelspeed);
 		//$("#fiV").text( msg.data.index);

	});



</script>
